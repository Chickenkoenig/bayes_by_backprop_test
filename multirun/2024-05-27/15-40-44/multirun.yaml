hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      model.architecture.activation: ReLU
      model.architecture.update_interval: '5'
      model.architecture.max_cols: '5'
      train.swag_start: '6000'
      train.use_low_rank: 'True'
      train.epochs: '8000'
      train.learning_rate: '0.01'
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra: []
    task:
    - +experiment=large_sin_gap/swag_ensemble_exp
  job:
    name: main
    chdir: null
    override_dirname: +experiment=large_sin_gap/swag_ensemble_exp
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/lucas/PycharmProjects/bayes_by_backprop_test
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/lucas/PycharmProjects/bayes_by_backprop_test/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      experiment: large_sin_gap/swag_ensemble_exp
      train: swag_train
      plot: default
      model/architecture: swag
      model: ensemble
      model/ensemble_type: swag_ensemble
      data: large_sin_gap
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
data:
  name: large_sin_gap
  x_start: -6
  x_end: 6
  x_test_start: -8
  x_test_end: 8
  num_train_points: 1000
  num_validation_points: 500
  num_test_points: 700
  gap: true
  gap_start: -1.5
  gap_end: 1.5
  ground_truth: sin_clean_target
  noisy_target: sin_noisy
model:
  ensemble_type:
    network_count: 3
  type: ensemble
  architecture:
    type: swag
    update_interval: ???
    max_cols: ???
    activation: ???
    layers:
    - type: Linear
      in_features: 1
      out_features: 300
    - type: ${model.architecture.activation}
    - type: Linear
      in_features: 300
      out_features: 1
plot:
  figsize:
  - 10
  - 8
  colors:
    mean: navy
    confidence: navy
    test_set: darkorange
    target_function: green
  linewidth: 3
  markersize: 4
  alpha: 0.2
train:
  epochs: ???
  learning_rate: ???
  swag_start: ???
  use_low_rank: ???
exp_name: large_sin_gap_swag_ensemble
